battle meta.0 = RAM 80107930-80107f6c
	800c0930  lbu  s5, 0(v0)
	if ( s5 >= 80 )
	if ( s5 >= 10 )

	80024500  lhu  a1, 2(v1)

	800233dc  lhu  v0, 2(s1)
		v0 += 2
	800233f0  lhu  v0, 0(s1)
		(v0 & 3) << 14
	80023408  lhu  v0, 4(s1)
		v0 += 4
	8002341c  lbu  v0, 0(s1)
		(v0 >> 2) & 20
	800234d0  lhu  v0, 0(s1)
		(v0 >> b) & 1
	80023508  lhu  v0, 0(s1)
		(v0 >> c) & 1
	80023530  lhu  v0, 0(s1)
		(v0 >> d) & 1

	8002230c  lhu  a0, 4(a2)
		a0 += 4

	8001fba0  lbu  v0, 1(s1)
	8001fba4  lbu  v1, 0(s1)
		v1 | ((v0 << 18) >> 10)

	800c12b4  lb   v0, 1(s2)
	800c12b8  lbu  v1, 0(s2)
		((v1 | (v0 << 8)) >> b) & f

battle meta.1 = RAM 80107f6c-80108ca4
	8001d9c8  lhu  v0, 0(t1)
		v0 &= 1ff
	8001da8c  lhu  v0, 0(t1)
		v0 &= 8000

	8001d3f8  lhu  v0, 0(a1)
		a0 = v0 + t0
	8001d404  lbu  v1, 3(a0)
	8001d414  lbu  v0, 0(a0)
		a0 += 4
		t0 = v0 & 80
		((v0 & 3f) << 1) + 4
	8001d460  lbu  v1, 1(a0)

	8001d4d4  lbu  s1, 0(s2)
		if ( s1 & 80 )
		if ( s1 & 40 )
		s7 = (s1 & 7) << 3
		v0 = s1 & 20

	8001d604  lhu  v0, 0(t0)
		s3 = v0 + t0
	8001d618  lbu  s1, 0(s3)
		if ( s1 & 1 )
	8001d670  lbu  v1, 0(s2)
	8001d674  lbu  v0, 0(s2)
		(v0 >> 4) & 3
		v1 & f

	8001d83c  lbu  v0, 1(s3) -> 4(s0)
	8001d84c  lbu  v0, 2(s3) -> 5(s0)
	8001d860  lbu  v0, 3(s3) -> 6(s0)
	8001d86c  lbu  v0, 4(s3) -> 7(s0)

	8001d878  lbu  v0, 0(s2)
		(v0 >> 2) & 10
	8001d8d8  lbu  v0, 1(s2)
		int8(v0) -> 0(s0)
	8001d8ec  lbu  v0, 2(s2)
		int8(v0) -> 2(s0)
//////////////////////////////
Save Data header/100
	00  SC
	02  0111 = 1 frame
	04  sjis text[5c]
	60  pal 16 color
	80  pix 16 x 16  4-bpp

Save Data = RAM 8006cf30
	RAM       2595.bin  SAVE + 100
	8006ccc4     0        24
	8006cda0    dc       100
	8006cf30   26c       290  // char data
	8006d63c   978       99c  // gear data
	8006e30c  1648       e4c
	8006e384  16c0       ec4
	8006e4e4  1820      1024  // world map camera
	8006e5e4  1920      1124  // game data
	8006f01c  2358      1b5c  // end


SAVE fei hp
	break [8006cf7c]?
	801cba94  lbu  v1, 30(v0)
		v0 = v1 * a4
	801cbab8  lhu  v0, -3084(at)
	801cbac0  sh   v0,     4(a2) // a2=801c30f8

	801e49cc  lw  v0, 0(a2) -> sw  0(a3)
	801e49d0  lw  v1, 4(a2) -> sw  4(a3)
	801e49d4  lw  a0, 8(a2) -> sw  8(a3)
	801e49d8  lw  a1, c(a2) -> sw  c(a3)
	// a2=8006cf70  a3=801c33c8

	break [801c33c8]?
	801cc38c  lbu  v0, 0(v1)


save data
	SAVE  290 + ( b * a4) = RAM 8006cf30 + ( b * a4)  // char data
	SAVE  99c + (14 * 3c) = RAM 8006d63c + (14 * a4)  // gear data
		lw    0(RAM) -> sw   0(SAVE)
		lw    4(RAM) -> sw   4(SAVE)
		lw    8(RAM) -> sw   8(SAVE)
		lw    c(RAM) -> sw   c(SAVE)
		lw   10(RAM) -> sw  10(SAVE)
		lw   14(RAM) -> sw  14(SAVE)
		lw   18(RAM) -> sw  18(SAVE)
		lw   1c(RAM) -> sw  1c(SAVE)
		lw   20(RAM) -> sw  20(SAVE)
		lw   24(RAM) -> sw  24(SAVE)
		lw   5c(RAM) -> sw  28(SAVE)  weapon level
		lw   60(RAM) -> sw  2c(SAVE)  hp
		?? sw  30(SAVE)
		lhu  38(RAM) -> sh  34(SAVE)  fuel
		?? sh  36(SAVE)
		lbu  99(RAM) -> sb  38(SAVE)
		lbu  74(RAM) -> sb  39(SAVE)  power output
		lbu  75(RAM) -> sb  3a(SAVE)  carry limit
		?? sb  3b(SAVE)
	SAVE   24 +  dc = RAM 8006ccc4 +  dc
	SAVE  100 + 190 = RAM 8006cda0 + 190  // gear name
	SAVE  e4c +  78 = RAM 8006e30c +  78
	SAVE  ec4 + 160 = RAM 8006e384 + 160  // char skill + spell learned
	SAVE 1024 + 100 = RAM 8006e4e4 + 100
	SAVE 1124 + a38 = RAM 8006e5e4 + a38  // game data
	=> end SAVE 1b5c = RAM 8006f10c

checksum
	sum = 0
	for ( i=100; i <= 1ffe; i++ )
		sum = (sum + save[i]) & ff
	save[1fff] = sum

gear name = 14 gear * 14 byte = 190 bytes
save text = [801c2518..801c4ff4]?

char skill + spell learned
	00  int16  char skill // 8000 , 4000,2000 , 1000,800,400,200 , 100,80,40,20,10,8
	02  int16  char spell
	04  int16  gear skill // lv1=1000,800,[400]  lv2=200,100,[80]  lv3=40,20,[10]
	06  int16  gear spell
	1a  int16  gear option
	for ( i=0; i < 10; i++ )
		flag = 1 << (f - i)
		if  int16 & flag
			// skill[i] learned
//////////////////////////////
char data/a4
	[8006cf30..8006cfd3]?!!  fei
	[8006d1c0..8006d263]?!!  billy
	00  weapon + gun ammo effect
		801e3910  sh   v0,  0(a1) // 8(v1) ->
		801e395c  sh   v0,  0(a1) // 8(v1) ->
		801e39cc  lhu  v1,  0(a1)
	02  weapon + gun ammo effect
		801e391c  sb   v0,  2(a1) // a(v1) ->
		801e3968  sb   v0,  2(a1) // a(v1) ->
	03  weapon + gun ammo effect
		801e3928  sb   v0,  3(a1) // b(v1) ->
		801e3974  sb   v0,  3(a1) // b(v1) ->
		801e39b8  lbu  v1,  3(a1)
	04  weapon + gun ammo effect
		801e3904  sb   v0,  4(a1) // c(v1) ->
		801e3950  sb   v0,  4(a1) // c(v1) ->
	05
	06
	07
	08
	09
	0a
	0b
	0c
	0d
	0e
	0f
	10
	11
	12
	13
	14
	15
	16
	17
	18  shotgun ammo effect
		801e399c  sh   v0, 18(a1) // 8(v1) ->
	1a  shotgun ammo effect
		801e39a8  sb   v0, 1a(a1) // a(v1) ->
	1b  shotgun ammo effect
		801e39b4  sb   v0, 1b(a1) // b(v1) ->
	1c  shotgun ammo effect
		801e3990  sb   v0, 1c(a1) // c(v1) ->
	1d
	1e
	1f
	20
	21
	22
	23
	24
	25
	26
	27
	28  accessory + bonus attack/8000
		801e3668  sb    0, 28(a1)
		801e37d0  lbu  v0, 28(a1)
			v0 += c(a2)
		801e37dc  sb   v0, 28(a1)
	29  accessory + bonus defense/4000
		801e366c  sb    0, 29(a1)
		801e37f4  lbu  v0, 29(a1)
			v0 += c(a2)
		801e3800  sb   v0, 29(a1)
	2a  accessory + bonus agility/2000
		801e3670  sb    0, 2a(a1)
		801e3818  lbu  v0, 2a(a1)
			v0 += c(a2)
		801e3824  sb   v0, 2a(a1)
	2b  accessory + bonus ether/1000
		801e3674  sb    0, 2b(a1)
		801e383c  lbu  v0, 2b(a1)
			v0 += c(a2)
		801e3848  sb   v0, 2b(a1)
	2c  accessory + bonus ethdef/800
		801e3678  sb    0, 2c(a1)
		801e3860  lbu  v0, 2c(a1)
			v0 += c(a2)
		801e386c  sb   v0, 2c(a1)
	2d  accessory + defense + bonus defense/100
		801e3660  sb    0, 2d(a1)
		801e36bc  lbu  v0, 2d(a1)
			v0 += 8(a2)
		801e36cc  sb   v0, 2d(a1)
		801e38cc  lbu  v0, 2d(a1)
			v0 += c(a2)
		801e38d8  sb   v0, 2d(a1)
	2e  accessory + bonus hit/400
		801e367c  sb    0, 2e(a1)
		801e3884  lbu  v0, 2e(a1)
			v0 += c(a2)
		801e3890  sb   v0, 2e(a1)
	2f  accessory + bonus evade/200
		801e3680  sb    0, 2f(a1)
		801e38a8  lbu  v0, 2f(a1)
			v0 += c(a2)
		801e38b4  sb   v0, 2f(a1)
	30  accessory/8,9 + max hp effect
		801e3684  sb    0, 30(a1)
		801e3790  lbu  v0, 30(a1)
			v0 += a(a2)
		801e37a4  sb   v0, 30(a1)
	31
		801e3688  sb    0, 31(a1)
	32  accessory/5 + support effect
		801e3664  sh    0, 32(a1)
		801e3778  lhu  v0, 32(a1)
			v0 |= a(a2)
		801e378c  sh   v0, 32(a1)
	34
	35
	36
	37
	38
	39
	3a
	3b
	3c  exp total
		801d72e8  lw   a0, v0(8006cf6c)
	40  exp before total (for count up)
		801d7498  lw   a0, v0(8006cf70)
	44  next exp total
		801d5740  lw   a0, v0(8006cf74)
	48  next exp loaded (updated per multiple level ups)
		801d5810  lw   a0, v0(8006cf78)
	4c  hp
		801d5378  lhu  a0, v0(8006cd7c)
	4e  max hp
		801d544c  lhu  a0, v0(8006cf7e)
	50  ep
		801d555c  lhu  a0, v0(8006cf80)
	52  max ep
		801d5630  lhu  a0, v0(8006cf82)
	54
	55  deathblow rate
	56  (4=has ammo , 64=elem atk->def)
		801e3924  lbu  v1, 56(a1)
	57
	58  attack
	59  defense
	5a  agility
	5b  ether
	5c  ether defense
	5d
	5e  hit %
	5f  evade %
	60
	61
	62  level
		801d5920  lbu  a0, v0(8006cd92)
	63
		801d59f0  lbu  a0, v0(8006cd93)
	64
	65
	66
	67
	68
	69
	6a  weapon/gun id
		801e38ec  lbu  v0, 6a(a1)
	6b  pistol id 1
	6c  pistol id 2
	6d  shotgun id
	6e
	6f  gun ammo id
		801e3938  lbu  v0, 6f(a1)
	70  pistol ammo id 1
		801d9340  lbu  a0,  0(s4)
		801d9354  lbu  a0,  0(s4)
		801df630  lbu  v0,  0(v0)
		801df8c4  sb   v1,  0(v0)
		801dfd9c  sb   v1,  0(v0)
		801e0168  lbu  a1,  0(v0)
	71  pistol ammo id 2
	72  shotgun ammo id
		801e3978  lbu  v0, 72(a1)
	73
	74  accessory id 1
		801e36ac  lbu  v0, 74(v0)
	75  accessory id 2
	76  accessory id 3
	77  weight
		801d7a40  lbu  a0, v0(8006cfa7)
	78  weight
		801d7a34  lbu  v1, v0(8006cfa8)
	79
		801d7a4c  lbu  s7, v0(8006cfa9)
	7a
	7b
	7c
	7d
	7e  accessory/1 + physical effect
		801e368c  sh    0, 7e(a1)
		801e3700  lhu  v0, 7e(a1)
			v0 |= a(a2)
		801e3714  sh   v0, 7e(a1)
	80
	81
	82  accessory/2 + mental effect
		801e3690  sh    0, 82(a1)
		801e3718  lhu  v0, 82(a1)
			v0 |= a(a2)
		801e372c  sh   v0, 82(a1)
	84
	85
	86  accessory/3 + stats effect
		801e3694  sh    0, 86(a1)
		801e3730  lhu  v0, 86(a1)
			v0 |= a(a2)
		801e3744  sh   v0, 86(a1)
	88
	89
	8a  accessory/4 + EP effect
		801e3698  sh    0, 8a(a1)
		801e3748  lhu  v0, 8a(a1)
			v0 |= a(a2)
		801e375c  sh   v0, 8a(a1)
	8c
	8d
	8e  accessory/7 + element defense
		801e369c  sh    0, 8e(a1)
		801e3760  lhu  v0, 8e(a1)
			v0 |= a(a2)
		801e3774  sh   v0, 8e(a1)
		801e39c8  lhu  v0, 8e(a1)
			v0 |= 0(a1)
		801e39d8  sh   v0, 8e(a1)
	90  deathblow exp weak 1
	92  deathblow exp weak 2
	94  deathblow exp weak 3
	96  deathblow exp weak 4
	98  deathblow exp mid 1
	9a  deathblow exp mid 2
	9c  deathblow exp hard
	9e
	9f
	a0  gear id
		801c6c40  lbu  v0, v0(8006cfd0)
		801d2f8c  lbu  a0, v0(8006cfd0)
	a1  accessory/a + deathblow rate
		801e36a0  sb    0, a1(a1)
		801e37a8  lbu  v0, a1(a1)
			v0 += a(a2)
		801e37b8  sb   v0, a1(a1)
	a2
	a3

char accessory data
	type = lbu/9
	eff  = lhu/a
	case
		1  7e(a1) |= eff
		2  82(a1) |= eff
		3  86(a1) |= eff
		4  8a(a1) |= eff
		5  32(a1) |= eff
		6  -
		7  8e(a1) |= eff
		8  30(a1) += eff
		9  30(a1) += eff
		a  a1(a1) += eff
	esac
//////////////////////////////
gear data/a4 -> 3c
	[8006d63c..8006d6df]?!!  fei
	[8006d970..8006da13]?!!  billy
	00..27  SAVE/00..27
		00
		01
		02  frame id
			801d6218  lbu  a1,  2(a2)
		03  engine id
			801d11d0  lbu  v0, v1(8006d63f)
			801d2aa8  lbu  a1, v0(8006d63f)
			801d2eb8  lbu  v0, v0(8006d63f)
			801f6304  lbu  v0,  3(a1)
		04  gun ammo id
			801e478c  lbu  v1,  4(a3)
		05  pistol ammo id
			801e47a8  lbu  v1,  5(a3)
		06
		07  gatling ammo id
			801d9340  lbu  a0,  0(s4)
			801d9358  lbu  a0,  0(s4)
			801dfa3c  sb   v1,  0(v0)
			801e47f0  lbu  v1,  7(a3)
		08  armor id
			801d62b0  lbu  a1,  8(v1)
		09  accessory id 1
			801e43c0  lbu  v1,  9(v0)
		0a  accessory id 2
		0b  accessory id 3
		0c  weapon/gun id
			801e46dc  lbu  v1,  c(a3)
		0d
		0e
		0f  gatling id
			801d92d8  lbu  a0,  3(t0)
		10  weapon/gun ammo + effect
			801e4708  sh   v0, 10(a3) // 12(a2) ->
			801e47b8  sh   v0, 10(a3) // 12(a2) ->
		12  weapon/gun ammo + effect
			801e46fc  sb   v0, 12(a3) //  e(a2) ->
			801e47ac  sb   v0, 12(a3) //  e(a2) ->
		13  weapon/gun ammo + effect
			801e4714  sb   v0, 13(a3) // 13(a2) ->
			801e47c4  sb   v0, 13(a3) // 10(a2) ->
		14  weapon/gun ammo + effect
			801e4720  sb   v0, 14(a3) // 11(a2) ->
			801e47d0  sb   v0, 14(a3) // 11(a2) ->
		15
		16
		17
		18  pistol ammo + effect
			801e480c  sh   v0, 18(a3) // 12(a2) ->
		1a  pistol ammo + effect
			801e4800  sb   v0, 1a(a3) //  e(a2) ->
		1b  pistol ammo + effect
			801e4818  sb   v0, 1b(a3) // 10(a2) ->
		1c  pistol ammo + effect
			801e4824  sb   v0, 1c(a3) // 11(a2) ->
		1d
		1e
		1f
		20  gatling ammo + effect
			801e485c  sh   v0, 20(a3) // 12(a2) ->
		22  gatling ammo + effect
			801e4850  sb   v0, 22(a3) //  e(a2) ->
		23  gatling ammo + effect
			801e4868  sb   v0, 23(a3) // 10(a2) ->
		24  gatling ammo + effect
			801e4874  sb   v0, 24(a3) // 11(a2) ->
		25
		26
		27
	28
	29
	2a
	2b
	2c
	2d
	2e
	2f
	30
	31
	32
	33
	34
	35
	36
	37
	38  SAVE/34  engine fuel
		801d630c  lhu  a0, 38(a1)
		801d6364  sh   v0, 38(a1) // 3a(a1) ->
	3a  engine max fuel
		801d6320  sh   v0, 3a(a1) // 6(v1) ->
		801d6348  lhu  v0, 3a(a1)
		801d635c  lhu  v0, 3a(a1)
	3c  engine output
		801d632c  sb   v0, 3c(a1) // c(v1) ->
		801e3d6c  lbu  a0, 3c(a1)
	3d  engine power multiplier %
		801d6338  sb   v0, 3d(a1) // d(v1) ->
	3e  engine power output
		801d6344  sb   v0, 3e(a1) // e(v1) ->
	3f  engine power output
		801d6358  sb   v1, 3f(a1) // e(v1) ->
	40  accessory + defense
		801e42f4  sh    0, 40(s0)
		801e43dc  lhu  v1, 40(s0)
			v1 += d(a3)
		801e43e8  sh   v1, 40(s0)
	42  accessory + ethdef
		801e42f8  sh    0, 42(s0)
		801e43f0  lhu  v1, 42(s0)
			v1 += e(a3)
		801e43fc  sh   v1, 42(s0)
	44  accessory + carry penalty
		801e42fc  sh    0, 44(s0)
		801e4400  lhu  v1, 44(s0)
			v1 += 6(a3)
		801e4410  sh   v1, 44(s0)
		801e48b4  lhu  v0, 44(v1)
	46
	47
	48  accessory/9 + save fuel
		801e4300  sh    0, 48(s0)
		801e45d4  lhu  v0, 48(s0)
			v1 |= 16(a3)
		801e45e4  sh   v0, 48(s0)
	4a
		801e4640  sb   v0, 4a(s0)
	4b
	4c  accessory + bonus defense
		801e4304  sb    0, 4c(s0)
		801e4414  lbu  v1, 4c(s0)
			v1 += 18(a3)
		801e4424  sb   v1, 4c(s0)
	4d  accessory + response
		801e4308  sb    0, 4d(s0)
		801e4428  lbu  v1, 4d(s0)
			v1 += 14(a3)
		801e4438  sb   v1, 4d(s0)
	4e
		801e430c  sb    0, 4e(s0)
	4f  accessory/5 + repair frame
		801e4310  sb    0, 4f(s0)
		801e4550  lbu  v1, 4f(s0)
			v1 += 16(a3)
		801e4564  sb   v1, 4f(s0)
	50..53
		801e4354  sb    0, 50(v0)
	51
	52
	53
	54  accessory + ether
		801e4318  sb    0, 54(s0)
		801e443c  lbu  v1, 54(s0)
			v1 += 1b(a3)
		801e444c  sb   v1, 54(s0)
	55..57
		801e4378  sb    0, 55(s0)
	56  accessory/a + engine output
		801e3d68  lbu  v1, 56(a1)
		801e45e8  lbu  v0, 56(s0)
			v0 += 16(a3)
		801e45fc  sb   v0, 56(s0)
	57  accessory/b + charge fuel
		801e4600  lbu  v0, 57(s0)
			v0 += 16(a3)
		801e4610  sb   v0, 57(s0)
	58
	59
	5a
	5b
	5c  SAVE/28
		5c  weapon level
			801e472c  sb   v0, 5c(a3) // 0(a2) ->
		5d  gun ammo level
			801e47dc  sb   v0, 5d(a3) // 1(a2) ->
		5e  pistol ammo level
			801e4830  lbu  v0, 5e(a3) // 2(a2) ->
		5f  gatling ammo level
			801e4880  lbu  v0, 5f(a3) // 3(a2) ->
	60  SAVE/2c  frame hp
		801d626c  lw   v0, 60(a2)
		801d6280  sw   a0, 60(a2) // 64(a2) ->
	64  frame max hp
		801d6238  sw   v0, 64(a2) // 4(v1) ->
		801d6240  lw   a0, 64(a2)
	68  frame weight
		801d6244  sh   v0, 68(a2) // 8(v1) ->
	6a
	6b
	6c
	6d
	6e  accessory/4 + damage down
		801e4314  sh    0, 6e(s0)
		801e44f4  lhu  v0, 6e(s0)
			v0 |= 16(a3)
		801e4504  sh   v0, 6e(s0)
	70  armor defense
		801d62d0  sh   v0, 70(v1) // 8(a0) ->
	72  armor eth defense
		801d62dc  sh   v0, 72(v1) // a(a0) ->
	74  SAVE/39  power output
		801e3d64  lbu  v0, 74(a1)
	75  SAVE/3a  carry limit
		801e48c0  lbu  v1, 75(v1)
	76
	77
	78
	79
	7a
	7b
	7c
	7d
	7e  accessory/1 + prevent status
		801e4398  sh    0, 7e(s0)
		801e44ac  lhu  v0, 7e(s0)
			v0 |= 16(a3)
		801e44c0  sh   v0, 7e(s0)
	80
	81
	82  accessory/2 + charge status
		801e439c  sh    0, 82(s0)
		801e44c4  lhu  v0, 82(s0)
			v0 |= 16(a3)
		801e44d8  sh   v0, 82(s0)
	84
	85
	86  accessory/3 + element defense
		801e4390  lhu  v0, 86(s0)
			v0 &= f000
		801e43a4  sh   v0, 86(s0)
		801e44dc  lhu  v0, 86(s0)
			v0 |= 16(a3)
		801e44f0  sh   v0, 86(s0)
	88..97  damage down %
		801e4524  lbu  v1, 88(v0)
			v1 += 1a(a3)
		801e4534  sb   v1, 88(v0)
	98  frame agility
		801d6250  sb   v0, 98(a2) // 14(v1) ->
	99  SAVE/38
	9a
	9b
	9c
	9d  frame ???
		801d6268  sb   v0, 9d(a2) // 16(v1) ->
	9e  frame ???
		801d625c  sb   v0, 9e(a2) // 15(v1) ->
	9f  frame ???
		801d627c  sb   v0, 9f(a2) // 17(v1) ->
	a0
	a1
	a2
	a3

v0 = ( 44(gear) / 120.0 ) - 75(gear)
if ( v0 < 0 )
	v0 = 0
4a(gear) = v0 & ff

agility penalty = ( carry penalty / 120.0 ) - carry limit



gear accessory data
	type = lbu/15
	eff  = lhu/16
	case
		1  7e(s0) |= eff
		2  82(s0) |= eff
		3  86(s0) |= eff
		4  6e(s0) |= eff
			for i in 0..10
				v0   = s0 + i
				flag = 1 << i
				if  eff & flag
					88(v0) += 1a(a3)
		5  4f(s0) += eff
		6  v1 = 0(t0)
			if  (v1 & 1000) == 0 // lv 1 weak
				break
			if  (v1 &  800) == 0 // lv 1 mid
				break
			0(t0) |= 400         // lv 1 hard
		7  v1 = 0(t0)
			if  (v1 &  200) == 0 // lv 2 weak
				break
			if  (v1 &  100) == 0 // lv 2 mid
				break
			0(t0) |= 80          // lv 2 hard
		8  v1 = 0(t0)
			if  (v1 &   40) == 0 // lv 3 weak
				break
			if  (v1 &   20) == 0 // lv 3 mid
				break
			0(t0) |= 10          // lv 3 hard
		9  48(s0) |= eff
			56(s0) |= eff
		a  56(s0) |= eff
		b  57(s0) |= eff
	esac
//////////////////////////////
world map camera/100
	00  Char Pos X
	02  Char Pos Y
	04  Char Rotation
	06  Gear 1 Rotation
	08  Gear 2 Rotation
	0a  Gear 3 Rotation
	0c  Yggdrasil Pos X
	0e
	10  Yggdrasil Pos Y
	12  Rotation
	14
	16
	18
	1a
	1c  Gear 1 OFF/walk
	1e  Gear 2 OFF/walk
	20  Gear 3 OFF/walk
	22
	24  Thames Pos X
	26  Thames Pos Y
	28
	2a
	2c  Shevat
	2e  Shevat Pos X
	30  Shevat
	32  Shevat Pos Y
	34
	36
	38
	3a
	3c
	3e
//////////////////////////////
game data/a38
	[8006e5e4..8006f01b]?!!
	[800c2f2c..800c3963]?!!
	00
	01
	02
	03
	04  gald
	08
	09
	0a
	0b
	0c
	0d
	0e
	0f
	10
	11
	12
	13
	14  prev room id
	16  facing (0=north , 2=east , 4=south , 6=west)
	17
	18
	19
	1a
	1b
	1c  time second
	1d  time minute
	1e  time hour
	1f
	20
	21
	22
	23
	24
	25
	26  current battle point/copy
	28  total battle point/copy
	2a
	2c
	2e  room pos x (west--  , east++)
	30  room pos y (north++ , south--)
	32  room pos z
	34
	35
	36,3c,42,48  room/world map
		00  world map pos x (west--  , east++)
		02  world map pos y (north++ , south--)
		04  room id
	4e  party char 1
	50  party char 2
	52  party char 3
	54
	...
	25e  current battle point
	260  total battle point
	262
	263
	...
	418  item[64]  char weapon
	4e0  item[c8]  char accessory
	670  item[96]  item
	79c  item[64]  gear weapon
	864  item[96]  gear accessory
	990
	...

item[] = int8[] count , int8[] id
//////////////////////////////
map opcode dec.5
	lw   v0, 800ad0d0  // FILE dec.5
	lw   v0, 800ad0d8  // op_const
	lw   op, 800af54c  // op_struct
	lhu  v1, cc(op)    // op_cur
	sh   v1, 78(op)    // op_ret
	lw   v0, 800af594  // op_
	lw   v0, 800c2f3c  // op_stack [+fffe , all half]

	00  [blocking]
	01  p = lhu/1
	02  v1 = lbu/5 & f0
		if ( v1 === 40 )
			s1 = lhu/1; s0 = lh/3
		else
		if ( v1 === 80 )
			s1 = lh/1; s0 = lhu/3
		else
		if ( v1 === c0 )
			s1 = lh/1; s0 = lh/3
		else
		if ( v1 === 0 )
			s1 = lhu/1; s0 = lhu/3
		else
		a0 = lbu/5 & f
		case a0  [to false]
			0)  s1 !== s0
			1|7)  s1 === s0
			2)  s0 >= s1
			3)  s1 >= s0
			4)  s1 < s0
			5)  s0 < s1
			6|9)  s1 & s0
			8)  s1 | s0
			a)  ~s1 & s0
			*)  [to true]
		esac
		if  [false]  p = lhu/6  else  p += 8
	03  9bb7c( [af1f0],2 )
	04
	05  ret = p + 3; p = lhu/1  [STACKERR ACT=%d]
	06  ret = p + 5; p = lhu/1  [STACKERR ACT=%d]
	07  const/1  lbu/2  p += 3
	08  const/1  lbu/2  p += 3
	09  const/1  lbu/2  p += 3
	0a  lbu/1
		if ( 4a5b4() < 0 )
			p += 4
		else
			ret = p + 4; p = lhu/2
	0b  var/1  p += 3
	0c  bak = p; a7(); p = bak
	0d  p = ret  [STACKERR ACT=%d]
	0e  p++  [nop]
	0f  p++  [nop]

	10  90(op) = -1;    98280(0)
	11  90(op) = var/b; 98280(1)
	12  if ( [ad068] === 0 )
			98()
			var/0
			var/2
			p += 4
		else
	13  () <- fd  ff
		=> p++  [nop]
	14  [b164a] = 0; p++
	15  p++
	16  var/1  p += 3
	17  lbu/11
		/11 & 80  var/1
		/11 & 40  var/3
		/11 & 20  var/5
		/11 & 10  var/7
		/11 & 08  var/9
		/11 & 04  var/b
		/11 & 02  var/d
		/11 & 01  var/f
		p += 12
	18  18(op) = lbu/1
		1c(op) = lbu/2
		1a(op) = lbu/3
		1e(op) = lbu/4
		p += 5
	19  lbu/5
		/5 & 80  var/1
		/5 & 40  var/3
		p += 6
	1a  lbu/1  p += 2
	1b  lbu/5  lbu/6
		/5 & 80  var/1
		/5 & 40  var/3
		p += 7
	1c  lbu/3
		/3 & 80  var/1
		p += 4
	1d  lh/1  lh/3  lh/5  p += 7
	1e  p++
	1f  lbu/1  p += 2

	20  var/1  p += 3
	21  var/1  p += 3
	22  p++
	23  p++
	24  const/1  p += 2
	25  const/1  p += 2
	26  var/1  p += 3
	27  const/1  p += 2
	28  const/1  p += 2
	29  const/1  p += 2
	2a  0(op) |=  20000; p++
	2b  0(op) &= ~20000; p++
	2c  () <- 5d
		=> lbu/1  p += 2
	2d  const/1  lhu/2  lhu/4  lhu/6  p += 8
	2e  lhu/1  p += 3
	2f  lhu/1  p += 3

	30  lhu/1; p += 3
	31  9564c( [af370] )
	32  9564c( [af140] )
	33  [af140] = 0; p++
	34  var/1  lhu/3  p += 5
	35  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	36  lhu/1  p += 3
	37  lhu/1  p += 3
	38  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	39  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	3a  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	3b  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	3c  lhu/1  p += 3
	3d  lhu/1  p += 3
	3e  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	3f  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6

	40  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	41  lhu/1  var/3  p += 5
	42  lhu/1  var/3  p += 5
	43  lhu/1  p += 3
	44  var/3; 99094(); p += 5
	45  var/5; 97024(); p += 8
	46  p++
	47  if ( [ad068] === 0 )
			91e68()
		else
	48  lhu/1  var/5  lhu/3  p += 7
	49  lhu/1  var/5  lbu/7  lhu/3  p += 8
	4a  99094(); p += 6
	4b  var/6; 99094(); p += 8
	4c  97024(); p += 8
	4d  var/8; 97024(); p += a
	4e  99094(); p += 6
	4f  var/6; 99094(); p += 8

	50  97024(); p += 8
	51  var/8; 97024(); p += a
	52  99094(); p += 2
	53  var/2; 99094(); p += 4
	54  lbu/1; 97024(); p += 5
	55  lbu/1  var/5; 97024(); p += 7
	56  lbu/9
		/9 & 80  var/1
		/9 & 40  var/3
		/9 & 20  var/5
		/9 & 10  var/7
		p += a
	57  a0 = lbu/1 & 3
		if ( a0 === 1 )
			lbu/a
			/a & 80  var/2
			/a & 40  var/4
			/a & 10  var/8
			/a & 20  var/6
			p += d
		else
		if ( a0 === 2 )
			lbu/a
			/a & 10  var/8
			/a & 80  var/2
			/a & 40  var/4
			/a & 20  var/6
			p += d
		else
		if ( a0 === 3 )
			if ( lbu/1 !== f )
				/a & 80  var/2
				/a & 40  var/4
				/a & 20  var/6
				p += d
			else
				p += 2
		else
		if ( a0 === 0 )
			lbu/a
			/a & 10  var/8
			/a & 80  var/2
			/a & 40  var/4
			/a & 20  var/6
			p += d
		else
	58  lbu/3
		if ( /3 === 1 || /3 === 2 || /3 === 0 )
			var/1
		p += 4
	59  p++
	5a  5b(); p++
	5b  () <- 5a
		=> [blocking]
	5c  var/1
		if ( a0 === ff )
			bc()
			p += 2
		else
			p += 3
	5d  2c()
	5e  4(op) |= 10000; p++
	5f  lbu/1  p += 2

	60  p++
	61  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	62  9c30c(1); p += 2
	63  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	64  p++
	65  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	66  9c30c(1); p += 2
	67  var/2  99f2c()
	68  var/2  99f2c()
	69  var/1  99ed8()
	6a  var/1  9a0dc() => p += 3
	6b  var/1  99ed8()
	6c  var/1  99ed8()
	6d  lhu/1  lbu/7
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	6e  lhu/1  lbu/7
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	6f  const/1  p += 2

	70  lbu/1  p += 2
	71  var/1  p += 3
	72  if ( [8ed20] !== 0 )  8ed8c()
	73  lbu/1
		if ( /1 === 0 )
			p += 2
		else
		if ( /1 === 1 )
			var/2  var/4  var/6
			p += 8
		else
	74  var/1  p += 3
	75  if ( [ad0e4] !== 0 )  8ed8c()
	76  0(op) &= ~8000; p++
	77  0(op) |=  8000; p++
	78  lhu/2  lbu/1  p += 4
	79  p++
	7a  p++
	7b  lbu/3
		/3 & 80  var/1
		p += 4
	7c  lbu/3
		/3 & 80  var/1
		p += 4
	7d  lbu/3
		/3 & 80  var/1
		p += 4
	7e  lbu/3
		/3 & 80  var/1
		p += 4
	7f  var/1  p += 3

	80  var/3  lbu/1  lbu/2  p += 5
	81  lbu/1  lbu/2  var/3  p += 5
	82  lbu/1  lbu/2  lhu/3  p += 5
	83  lbu/1  lbu/2  var/3  p += 5
	84  if ( v0 >=  var/1 )  p = lhu/3  else  p += 5
	85  if ( var/1 >=  v0 )  p = lhu/3  else  p += 5
	86  if ( v0 !== var/1 )  p = lhu/3  else  p += 5
	87  var/1  p += 3
	88  lhu/1  p += 3
	89  const/1; if ( 98fd0() >= var/2 )  p = lhu/4  else  p += 6
	8a  if ( [ad0f0] === 0 )
			if ( 14(sp)-1 < df && 10(sp)-1 < 13f ) // y < 224 && x < 320
				p += 4
			else
				p = lhu/2;
		else
			p += 4
	8b  var/1; if ( v0 === -1 )  p = lhu/3  else  p += 5
	8c  var/1  p += 3
	8d  var/1  p += 3
	8e  lbu/1  lbu/2  lbu/3  lbu/4
		v1 = (/4 << 18) + (/3 << 10) + (/2 << 8) + /1
		if ( v0 < v1 )  p = lhu/5  else  p += 7
	8f  var/1  p += 3  [max=9,999,999]

	90  var/1  p += 3
	91  if ( [61c20] !== lbu/1 )  p = lhu/2  else  p += 4
	92  0  [blocking]
	93  var/1  p += 3
	94  var/1  var/3  p += 5
	95  lbu/1  p += 2
	96  [4e9bc] = 0; [4e9cc] = ff; p++
	97  var/1  p += 3
	98  () <- 12
		=> var/3  var/1  p += 5
	99  p++
	9a  var/1  p += 3
	9b  var/1  var/3  p += 5
	9c  p++
	9d  lbu/3  var/1  p += 4
	9e  p++
	9f  p++

	a0  var/3  var/1  var/5  p += 7
	a1  var/1  p += 3
	a2  lbu/1  p += 2
	a3  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	a4  lbu/3
		/3 & 80  var/1
		p += 4
	a5  lhu/1  p += 3
	a6  p += ((var/1 * 3) + 3)
		[switch-case , id = var/1 , case = id*3 + 3 => 01() => p = lhu/1]
	a7  () <- 0c
		=> p++
	a8  var/3  lhu/1  p += 5
	a9  lbu/1  p += 2
	aa  lbu/1  p += 2
	ab  p++
	ac  lbu/1  var/2  p += 4
	ad  lhu/1  lhu/3  lhu/5  p += 7
	ae  lhu/1  lhu/3  lhu/5  p += 7
	af  lbu/3  lhu/1  p += 4

	b0  lbu/3  lhu/1  p += 4
	b1  lbu/3  lhu/1  p += 4
	b2  lbu/1  p += 2
	b3  var/1  p += 3
	b4  var/1  p += 3
	b5  var/1  var/3  p += 5
	b6  var/1  var/3  p += 5
	b7  0(op) |=  4000; p++
	b8  0(op) &= ~4000; p++
	b9  lbu/1; if ( v0 === 0 )  p = lhu/2  else  p += 4
	ba  lbu/1  p += 2
	bb  lbu/1  p += 2
	bc  () <- 5c
		=> p++
	bd  var/1  p += 3
	be  var/1  p += 3
	bf  var/1  p += 3

	c0  var/1  p += 3
	c1  var/1  p += 3
	c2  var/1  p += 3
	c3  [af594] = 1; p++
	c4  lbu/1  p += 2
	c5  lbu/1  p += 2
	c6  [af150] += 20; p++
	c7  var/1  p += 3
	c8  var/1  p += 3
	c9  lbu/1; if ( v0 < 0 )  p = lhu/2  else  p += 4
	ca  lhu/1  lbu/7
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	cb  lbu/1; if ( v0 < 0 )  p = lhu/2  else  p += 4
	cc  lbu/1  lhu/2  p += 4
	cd  0(op) |=  800000; p++
	ce  0(op) &= ~800000; p++
	cf  lbu/1  lbu/2  lbu/3  lbu/4  p += 5

	d0  var/1  var/3  var/5  var/7  var/9  p += b
	d1  0
	d2  9bb7c( [af1f0],0 )
	d3  9bb7c( [af1f0],1 )
	d4  () <- fc
		=> const/1
		if ( /1 === ff )
			p += 6
		else
			p++
			if ( 9bb7c( /1,0 ) !== -1 )
			else
				p--
	d5  lhu/1  p += 3
	d6  var/1  p += 3
	d7  var/1  p += 3
	d8  var/1  p += 3
	d9  var/1  p += 3
	da  lhu/9  lhu/f  lhu/1  lhu/3  lhu/5  lhu/7  lhu/b  lhu/d  p += 11
	db  var/1  var/3  p += 5
	dc  lhu/1  lhu/3  p += 5
	dd  lbu/5
		/5 & 80  var/1
		/5 & 80  var/3
		p += 6
	de  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6
	df  lhu/1  lbu/5
		/5 & 40  var/3
		p += 6

	e0  const/1  lbu/6
		/6 & 80  var/2
		/6 & 80  var/4
		p += 7
	e1  lbu/d
		/d & 80  var/1
		/d & 40  var/3
		/d & 20  var/5
		/d & 10  var/7
		/d & 08  var/9
		/d & 04  var/b
		p += e
	e2  956b8( [af370] )
	e3  956b8( [af140] )
	e4  0
	e5  var/1  var/3  var/5  var/7  var/9  var/b  var/d  var/f  p += 11
	e6  lh/1  lh/3  lh/5  lh/7  p += 9
	e7  var/1  var/3  var/5  p += 7
	e8  if ( 0(op) & 100000 )
			p += 7
		else
			if ( var/3 >= e2(op) )
				p += 7
			else
				if ( var/5 === 1000 )
					var/1
				else
				if ( var/5 === 1001 )
					var/1
				else
					var/5  var/1
	e9  if ( (0(op) & 100000) === 0 )
			p += 7
		else
			if ( var/3 === 0 )
				p += 7
			else
				if ( var/5 === 1000 )
					var/1
				else
				if ( var/5 === 1001 )
					var/1
				else
					var/5  var/1
	ea  if ( [ad068] === 0 )
			91e68()
		else
	eb  lbu/d
		/d & 80  var/1
		/d & 40  var/3
		/d & 20  var/5
		/d & 10  var/7
		/d & 08  var/9
		/d & 04  var/b
		lhu/e  lhu/10  lhu/12
		p += 14
	ec  lbu/1  lbu/8
		/8 & 80  var/2
		/8 & 40  var/4
		/8 & 20  var/6
		lhu/9  lhu/b  lhu/d
		p += f
	ed  lbu/1  lhu/2  lhu/4  lhu/6  p += 8
	ee  lbu/1  lbu/2  p += 3
	ef  var/1  p += 3

	f0  lhu/1  lhu/3  lhu/5  p += 7
	f1  var/9  var/3  var/5  var/7  var/1  p += b
	f2  var/1  var/3  var/5  var/7  p += 9
	f3  lhu/1  lhu/3  lhu/5  p += 7
	f4  lbu/1  p += 2
	f5  9bb7c( [af1f0],3 )
	f6  lbu/1  p += 2
	f7  var/1  var/3  p += 5
	f8  lhu/2  lbu/1  p += 4
	f9  const/1  p += 2
	fa  const/2  lbu/1
		s0 = [aefe4] + (/2 * 5c)
		case /1
			0)  50(s0) += var/3
			1)  50(s0) -= var/3
			2)  52(s0) += var/3
			3)  52(s0) -= var/3
			4)  54(s0) += var/3
			5)  54(s0) -= var/3
		esac
		p += 5
	fb  b = 1 << ( lhu/1 & f )
		if ( (v0 & s0) === 0 )  p = lhu/3  else  p += 5
	fc  const/1; if ( v0 === ff )  p += 6  else  d4()
	fd  13()  [nop]
	fe  p++  lbu/0  [PAGE2]
	ff  13()  [nop]


	fe/page2 opcode
	fe 00  0
	fe 01  p++
	fe 02  lhu/2
		if ( [ad0f0] === 0 )
			if ( [sp+14]-21 < 9f && [sp+10]-21 < ff )
				p += 4
		p = /2
	fe 03  var/1  p += 3
	fe 04  var/1  p += 3
	fe 05  const/1; if ( v1 !== var/2 )  p = lhu/4  else  p += 6
	fe 06  const/1; if ( s0 !== var/2 )  p = lhu/4  else  p += 6
	fe 07  lbu/1  p += 2
	fe 08  var/1  var/3  var/5  p += 7
	fe 09  var/1  p += 3
	fe 0a  var/1  p += 3
	fe 0b  var/1  p += 3
	fe 0c  lhu/1  lhu/3  lhu/5  lhu/7  lhu/9  lhu/b  p += d
	fe 0d  var/1  p += 3
	fe 0e  var/1  var/3  p += 5
	fe 0f  lbu/5
		/5 & 80  var/1
		/5 & 40  var/3
		p += 6

	fe 10  var/1  var/3  p += 5
	fe 11  lbu/5
		/5 & 80  var/1
		/5 & 40  var/3
		p += 6
	fe 12  var/1  p += 3
	fe 13  var/1  var/3  p += 5
	fe 14  var/1  var/3  p += 5
	fe 15  var/1  var/3  p += 5
	fe 16  p++
	fe 17  const/1  const/2  p += 3
	fe 18  lbu/1
		89d64() =>
			if ( [61c20] === /1 )
				return -1
			if ( [61c20] !== ff )
				return -1
			return 0
		if ( 89d64() !== 0 )
			p += 4
		else
			p += 2
	fe 19  lbu/1  p += 2
	fe 1a  p++
	fe 1b  lh/1  lh/3  p += 5
	fe 1c  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	fe 1d  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	fe 1e  lbu/1  p += 2
	fe 1f  p++

	fe 20  lbu/1  p += 2
	fe 21  var/1  p += 3
	fe 22  lhu/1  p += 3
	fe 23  lbu/d
		/d & 80  var/1
		/d & 40  var/3
		var/e
		/d & 20  var/5
		/d & 10  var/7
		var/10
		/d & 08  var/9
		/d & 04  var/b
		var/12
		if ( [af594] !== 7 )  p--  else  p += 14  [wait]
	fe 24  if ( [af594] !== 7 )  p--  else  p++  [wait]
	fe 25  lbu/1  p += 2
	fe 26  a3d24()
		p += f
	fe 27  lbu/1
		if ( /1 === 1 )
			p += 2
		if ( /1 === 2 )
			p += 2
		if ( /1 === 3 )
			p += 2
		if ( /1 === 0 )
			var/2
			p += 4
	fe 28  8da6c( 0(op) )
	fe 29  8da6c( 2(op) )
	fe 2a  8da6c( 4(op) )
	fe 2b  8da6c( 6(op) )
	fe 2c  lhu/1  p += 3
	fe 2d  lhu/1  p += 3
	fe 2e  lhu/1  p += 3
	fe 2f  lhu/1  p += 3

	fe 30  8d71c( 0(op) )
	fe 31  8d71c( 2(op) )
	fe 32  8d71c( 4(op) )
	fe 33  8d71c( 6(op) )
	fe 34  const/3; 8d6b0( 0(v0) )
	fe 35  const/3; 8d6b0( 2(v0) )
	fe 36  const/3; 8d6b0( 4(v0) )
	fe 37  const/3; 8d6b0( 6(v0) )
	fe 38  lhu/1  p += 5
	fe 39  var/1  p += 3
	fe 3a  var/1  p += 3
	fe 3b  var/1  p += 3
	fe 3c  var/1  var/3  p += 5
	fe 3d  lbu/9
		/9 & 80  var/1
		/9 & 40  var/3
		/9 & 20  var/5
		/9 & 10  var/7
		p += a
	fe 3e  lbu/9
		/9 & 80  var/1
		/9 & 40  var/3
		/9 & 20  var/5
		/9 & 10  var/7
		p += a
	fe 3f  var/1  var/3  var/5  p += 7

	fe 40  var/1  var/3  lhu/5  p += 7
	fe 41  var/1  p += 3
	fe 42  var/1  p += 3
	fe 43  [b16a3] = 1; p++
	fe 44  p++
	fe 45  lbu/1  p += 2
	fe 46  lbu/1  p += 2
	fe 47  var/1  p += 3
	fe 48  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	fe 49  75(op) = ff; p++
	fe 4a  var/1  p += 3
	fe 4b  if ( 89b2c() !== 0 )  p--  else  p++  [wait]
	fe 4c  fe4d()
	fe 4d  () <- fe4c
		=> lbu/1  p += 2
	fe 4e  p++
	fe 4f  [b16a4] = 0; p++

	fe 50  [b16a4] = 1; p++
	fe 51  [b16a5] = 0; p++
	fe 52  [b16a5] = 1; p++
	fe 53  [b164a] = 0;  [b16a4] = 0;  [b16a5] = 0; p++
	fe 54  if ( [ad0bc] !== 0 )  p++  else  p--  [wait]
	fe 55  [af594] = 1;  [ad03c] = 0;  [4e9f4]++;  [58811] = [b1840]; p++
	fe 56  var/1  p += 3
	fe 57  [af594] = 1;  [ad03c] = 2;  [4e9f4]++;  p++
	fe 58  var/1  p += 3
	fe 59  var/1  p += 3
	fe 5a  var/1  p += 3
	fe 5b  var/1  p += 3
	fe 5c  if ( lbu/1 === 1 )
			var/5
			p += 2
		else
		if ( lbu/1 === 2 )
			var/2
			p += 4
		else
		if ( lbu/1 === 0 )
			p += 2
		else
	fe 5d  var/1  var/5  var/3  p += 7
	fe 5e  var/1  p += 3
	fe 5f  lbu/1  var/2  var/4  var/6  p += 8

	fe 60  var/1  var/3  var/5  var/7  p += 9
	fe 61  if ( [ad054] !== 0 )  p++  else  p--  [wait]
	fe 62  var/3  var/1  p += 5
	fe 63  var/3  var/1  p += 5
	fe 64  var/1  p += 3
	fe 65  var/1  var/3  p += 5
	fe 66  var/1  var/5  var/3  var/7  p += 9
	fe 67  var/1  var/3  var/5  var/7  var/9  var/b  var/d  var/f  var/11  p += 13
	fe 68  lbu/5
		/5 & 80  var/1
		/5 & 40  var/3
		91e68()
	fe 69  var/3  lhu/1  p += 5
	fe 6a  var/1  p += 3
	fe 6b  var/3  var/1  p += 5
	fe 6c  p++
	fe 6d  p++
	fe 6e  lbu/3
		/3 & 80  var/1
		p += 4
	fe 6f  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8

	fe 70  var/1  p += 3
	fe 71  lhu/1  p += 3
	fe 72  lbu/9
		/9 & 40  var/3
		/9 & 20  var/5
		/9 & 10  var/7
		lhu/1
		p += a
	fe 73  lbu/b
		/b & 40  var/3
		/b & 20  var/5
		/b & 10  var/7
		/b & 08  var/9
		lhu/1
		p += c
	fe 74  lbu/1  lhu/1  p += 3  [DEB]
	fe 75  const/1  lhu/2  p += 4
	fe 76  lbu/f
		/f & 40  var/3
		/f & 20  var/5
		/f & 20  var/7
		/f & 10  var/9
		/f & 08  var/b
		/f & 08  var/d
		lhu/1
		p += 10
	fe 77  if ( lbu/1 !== 0 )
			if ( lbu/1 !== 1 )
				p += 2
			else
				lbu/a
				/a & 10  var/8
				/a & 40  var/4
				/a & 20  var/6
				p += b
		else
			lbu/d
			/d & 80  var/5
			p += 2
	fe 78  0
	fe 79  0
	fe 7a  0
	fe 7b  0
	fe 7c  0
	fe 7d  0
	fe 7e  0
	fe 7f  if ( [ad060] !== 0 )  p--  else  p++  [wait]

	fe 80  lhu/1  lhu/3  lhu/5  lhu/7  lhu/9  lhu/b  lhu/d  p += f
	fe 81  lbu/7
		/7 & 80  var/1
		/7 & 40  var/3
		/7 & 20  var/5
		p += 8
	fe 82  var/1  var/3  var/5  var/7  var/9  var/b  var/d  var/f  var/11  var/13  var/15  var/17  p += 19
	fe 83  var/1  p += 3
	fe 84  var/1  var/5  var/7  p += 9
	fe 85  lhu/1  p += 3
	fe 86  lbu/1  p += 2
	fe 87  if ( [4e9f4] !== 0 )  p--  else  p++  [wait]
	fe 88  lbu/11
		/11 & 80  var/1
		/11 & 40  var/3
		/11 & 20  var/5
		/11 & 10  var/7
		/11 & 08  var/9
		/11 & 04  var/b
		/11 & 02  var/d
		/11 & 01  var/f
		p += 12
	fe 89  lbu/9
		/9 & 80  var/1
		/9 & 40  var/3
		/9 & 20  var/5
		/9 & 10  var/7
		const/a
		p += b
	fe 8a  var/1  p += 3
	fe 8b  lhu/1  p += 3
	fe 8c  var/3  var/1  var/5  p += 7
	fe 8d  var/1  p += 3
	fe 8e  var/1  var/3  p += 5
	fe 8f  const/1  var/2  var/4  var/6  p += 8

	fe 90  var/1  var/3  var/5  var/7  p += 9
	fe 91  lbu/d
		/d & 80  var/1
		/d & 40  var/3
		/d & 20  var/5
		/d & 10  var/7
		/d & 08  var/9
		/d & 04  var/b
		p += e
	fe 92  lbu/d
		/d & 80  var/1
		/d & 40  var/3
		/d & 20  var/5
		/d & 10  var/7
		/d & 08  var/9
		/d & 04  var/b
		p += e
	fe 93  var/1  var/3  var/5  var/7  var/9  p += b
	fe 94  lbu/9
		/9 & 80  var/1
		/9 & 40  var/3
		/9 & 20  var/5
		/9 & 10  var/7
		p += a
	fe 95  lbu/d
		/d & 80  var/1
		/d & 40  var/3
		/d & 20  var/5
		/d & 10  var/7
		/d & 08  var/9
		/d & 04  var/b
		p += e
	fe 96  p++
	fe 97  lbu/1  p += 2
	fe 98  var/1  p += 3
	fe 99  lbu/1  p += 2
	fe 9a  const/2  lbu/1  var/3  var/5  var/7  p += 9
	fe 9b  var/1  p += 3
	fe 9c  var/1  p += 3
	fe 9d  var/1  p += 3
	fe 9e  var/1  var/3  var/5  var/7  p += 9
	fe 9f  var/2  lbu/1  p += 4

	fe a0  lbu/b
		/b & 80  var/1
		/b & 40  var/3
		/b & 20  var/5
		/b & 10  var/7
		/b & 08  var/9
		p += c
		??? p += 2
	fe a1  var/1  var/3  p += 5
	fe a2  if ( [4e9ac] !== -1 )  p++  else  p--  [wait]
	fe a3  lbu/1  p += 2
	fe a4  p++
	fe a5  var/1  var/3  var/5  p += 7
	fe a6  var/1  var/3  p += 5
	fe a7  var/1  var/3  var/5  var/7  p += 9
	fe a8  lhu/1  lhu/3  lhu/5  p += 7
	fe a9  lhu/1  lhu/3  lhu/5  p += 7
	fe aa  const/1  p += 2
	fe ab  lbu/3
		/3 & 80  var/1
		p += 4
	fe ac  lbu/3
		/3 & 80  var/1
		p += 4
	fe ad  lhu/1  lbu/3  p += 4
	fe ae  var/1  var/3  var/5  p += 7
	fe af  lbu/b
		/b & 80  var/1
		/b & 40  var/3
		/b & 20  var/5
		/b & 10  var/7
		/b & 08  var/9
		lhu/c  lhu/e  lhu/10
		p += 12

	fe b0  if ( lbu/1 !== 1 )
			var/2  var/4
			p += 6
		else
			p += 2
	fe b1  p++
	fe b2  var/2  lbu/1  p += 4
	fe b3  var/2  lbu/1  p += 4
	fe b4  lhu/1  lbu/3  p += 4
	fe b5  p++
	fe b6  const/1  p += 2
	fe b7  var/1  p += 3
	fe b8  var/2  lbu/1  p += 4
	fe b9  lhu/1  lhu/3  lhu/5  lhu/7  p += 9
	fe ba  lbu/9
		/9 & 80  var/1
		/9 & 40  var/3
		/9 & 20  var/5
		/9 & 10  var/7
		p += a
	fe bb  lhu/1  p += 3
	fe bc  lbu/3
		/3 & 80  var/1
		p += 4
	fe bd  var/1  p += 7
	fe be  [4e9a4] = 1; p++
	fe bf  var/1  var/3  var/5  var/7  var/9  var/b  p += d

	fe c0  lhu/1  p += 3
	fe c1  var/5  lhu/1  lhu/3  p += 7
	fe c2  var/1  var/3  var/5  var/7  p += 9
	fe c3  4(op) |= 2000800; p++
	fe c4  const/1  p += 2
	fe c5  var/1  var/3  p += 5
	fe c6  var/1  p += 5
	fe c7  var/1  lhu/3  p += 5
	fe c8  8830c(0) =>  lbu/11
			/11 & 80  var/1
			/11 & 40  var/3
			/11 & 20  var/5
			/11 & 10  var/7
			/11 & 08  var/9
			/11 & 04  var/b
			/11 & 02  var/d
			/11 & 01  var/f
			p += 12
	fe c9  8830c(4) =>  lbu/11
			/11 & 80  var/1
			/11 & 40  var/3
			/11 & 20  var/5
			/11 & 10  var/7
			/11 & 08  var/9
			/11 & 04  var/b
			/11 & 02  var/d
			/11 & 01  var/f
			p += 12
	fe ca  p += 2
	fe cb  [af594] = 1; [ad05c]++; p++
	fe cc  if ( [ad04c] !== 0 )  p--  else  p++
	fe cd  lhu/1  p += 3
	fe ce  var/1  p += 3
	fe cf  var/3  var/1  p += 5

	fe d0  var/1  var/3  p += 5
	fe d1  [] |= 4000; p++
	fe d2  p += 3
	fe d3  var/1  var/3  var/5  var/7  var/9  var/b  lhu/d  lhu/f  p += 11
	fe d4  if ( lbu/1 === 1 )
			var/2  var/4  var/6  var/8
			p += a
		else
		if ( lbu/1 === 2 )
			p += 2
		else
		if ( lbu/1 === 3 )
			var/2  var/4  var/6  var/8
			p += a
		else
		if ( lbu/1 === 0 )
			p += 2
		else
	fe d5  lhu/1  lhu/3  p += 5
	fe d6  lhu/1  lhu/3  p += 5
	fe d7  lbu/9
		/9 & 80  var/1
		/9 & 40  var/3
		p += 6
	fe d8  lbu/1  p += 2
	fe d9  lbu/1  p += 2
	fe da  [58811] = 1; [ad03c] = 6; [af594] = 1; [4e9f4]++; p++
	fe db  var/1  p += 3
	fe dc  var/1  var/3  p += 5
	fe dd  if ( lbu/1 === 1 )
			var/2  var/4
			p += 6
		else
		if ( lbu/1 === 2 )
			p += 2
		else
		if ( lbu/1 === 3 )
			p += 2
		else
		if ( lbu/1 === 0 )
			var/2  var/4
			p += 6
		else
	fe de  var/1  var/3  p += 5
	fe df  var/1  p += 3

	fe e0  lbu/1  p += 2
	fe e1  var/1  var/3  p += 5


	8d6b0() <- fe34 fe35 fe36 fe37
		=> if ( lhu/1 === 0 )  p = lhu/4  else  p += 6
	8d71c() <- fe30 fe31 fe32 fe33
		=> if ( lhu/1 === 0 )  p = lhu/3  else  p += 5
	8da6c() <- fe28 fe29 fe2a fe2b
		=>  lhu/1  p += 3
	8ed8c() <- 72  75
		=> var/1  p += 3
	91e68() <- 47  ea  fe68
		=> if ( a1 !== 0 )
		else
			var/4  var/2
		p += 6
	9564c() <- 31  32
		=> if ( lhu/1 === 0 )  p = lhu/3  else  p += 5
	956b8() <- e2  e3
		=> if ( lhu/1 !== a0 )  p = lhu/3  else  p += 5
	97024() <- 45  4c  4d  50  51  54  55
		=> if ( v1 === 1 )
			lbu/5
			/5 & 80  var/1
			/5 & 40  var/3
			/5 & 20  var/6
		else
		if ( v1 === 2 )
			const/1  lbu/4
			/4 & 80  var/2
		else
		if ( v1 === 3 )
			var/1  lbu/7
			/7 & 40  var/3
		else
		if ( v1 === 0 )
			lbu/5
			/5 & 80  var/1
			/5 & 40  var/3
			/5 & 20  var/6
		else
	98280() <- 10  11
		=> if ( lbu/1 !== 0 )
			p -= 9
			lbu/8
			/8 & 80  var/2
			/8 & 40  var/4
			/8 & 20  var/6
			if ( a0 !== 0 )  p += d  else  p += b
		else
			lbu/8
			/8 & 80  var/2
			/8 & 40  var/4
			/8 & 20  var/6
			p += 9
	99094() <- 44  4a  4b  4e  4f  52  53
		=> case v1
			0 | 1 | 4)  lbu/5
				/5 & 80  var/1
				/5 & 40  var/3
			2)  const/1
			3)  var/1
		esac
	99ed8() <- 69  6b  6c
		=> p += 3
	99f2c() <- 67  68
		=> const/1  p += 4
	9bb7c() <- 03  d2  d3  d4<-fc  f5
		=> lhu/1  lbu/3  p += 4
	9c30c() <- 62  66  95050()
		=> const/a0
	a3d24() <- fe26  a1ca4()
		=> var/1  var/5  var/7  var/9  var/b  var/d
//////////////////////////////
//////////////////////////////
